package wci.backend.interpreter;

import wci.backend.Backend;
import wci.backend.interpreter.executors.StatementExecutor;
import wci.intermediate.ICode;
import wci.intermediate.ICodeNode;
import wci.intermediate.SymTab;
import wci.intermediate.SymTabStack;
import wci.message.Message;
import wci.message.MessageListener;
import wci.message.MessageType;

import static wci.message.MessageType.INTERPRETER_SUMMARY;

public class Executor extends Backend
{
    protected static int executionCount;
    protected static RuntimeErrorHandler errorHandler;

    static {
        executionCount = 0;
        errorHandler = new RuntimeErrorHandler();
    }

    /**
     * Constructor.
     */
    public Executor() {}

    /**
     * Constructor for subclasses.
     * @param parent the parent executor.
     */
    public Executor(Executor parent)
    {
        super();
    }

    /**
     * Getter.
     * @return the error handler.
     */
    public RuntimeErrorHandler getErrorHandler()
    {
        return errorHandler;
    }

    /**
     * Execute the source program by processing the intermediate code
     * and the symbol table.
     * Process the intermediate code and the symbol table generated by the
     * parser to execute the source program.
     * @param iCode the intermediate code.
     * @param symTabStack the symbol table.
     * @throws Exception if an error occurred.
     */
    @Override
    public void process(ICode iCode, SymTabStack symTabStack)
        throws Exception
    {
        Backend.symTabStack = symTabStack;
        this.iCode = iCode;

        long startTime = System.currentTimeMillis();

        // Get the root node of the intermediate code and execute.
        ICodeNode rootNode = iCode.getRoot();
        StatementExecutor statementExecutor = new StatementExecutor(this);
        statementExecutor.execute(rootNode);

        float elapsedTime = (System.currentTimeMillis() - startTime)/1000f;
        int runtimeErrors = RuntimeErrorHandler.getErrorCount();

        // Send the interpreter summary message.
        sendMessage(new Message(INTERPRETER_SUMMARY,
                                new Number[] {executionCount,
                                              runtimeErrors,
                                              elapsedTime}));
    }

    /**
     * @param listener the listener to add.
     */
    @Override
    public void addMessageListener(MessageListener listener) {}

    /**
     * @param listener the listener to add.
     */
    @Override
    public void removeMessageListener(MessageListener listener) {}

    /**
     * @param message the message to set.
     */
    @Override
    public void sendMessage(Message message) {}
}
