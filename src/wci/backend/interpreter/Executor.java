package wci.backend.interpreter;

import wci.backend.Backend;
import wci.intermediate.ICode;
import wci.intermediate.SymTab;
import wci.intermediate.SymTabStack;
import wci.message.Message;
import wci.message.MessageListener;
import wci.message.MessageType;

import static wci.message.MessageType.INTERPRETER_SUMMARY;

public class Executor extends Backend
{
    /**
     * Process the intermediate code and the symbol table generated by the
     * parser to execute the source program.
     * @param iCode the intermediate code.
     * @param symTabStack the symbol table.
     * @throws Exception if an error occurred.
     */
    @Override
    public void process(ICode iCode, SymTabStack symTabStack)
        throws Exception
    {
        long startTime = System.currentTimeMillis();
        float elapsedTime = (System.currentTimeMillis() - startTime)/1000f;
        int executionCount = 0;
        int runtimeErrors = 0;

        // Send the compiler summary message.
        sendMessage(new Message(INTERPRETER_SUMMARY,
                new Number[] {executionCount,
                              runtimeErrors,
                              elapsedTime}));

    }

    /**
     * @param listener the listener to add.
     */
    @Override
    public void addMessageListener(MessageListener listener) {

    }

    /**
     * @param listener the listener to add.
     */
    @Override
    public void removeMessageListener(MessageListener listener) {

    }

    /**
     * @param message the message to set.
     */
    @Override
    public void sendMessage(Message message) {

    }
}
